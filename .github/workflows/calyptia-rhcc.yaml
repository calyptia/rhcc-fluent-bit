---
name: Deploy RHCC containers to staging

on:
  workflow_dispatch:
  push:

env:
  # Containers
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: rhcc-workflow
  cancel-in-progress: false

jobs:
  calyptia-rhcc-deploy-staging-images:
    name: RHCC - Build multi-arch UBI 8 container images
    runs-on: ubuntu-latest
    environment: rhcc
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and run the tests
      continue-on-error: true
      uses: docker/build-push-action@v2
      with:
        file: ./calyptia/ubi8/Dockerfile
        context: ./calyptia/ubi8/
        platforms: linux/amd64
        push: false
        load: false
        target: test

    - name: Extract metadata from Github
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          raw,ubi8-${{ github.sha }}
          raw,ubi8

    - name: Build the production image
      uses: docker/build-push-action@v2
      with:
        file: ./calyptia/ubi8/Dockerfile
        context: ./calyptia/ubi8/
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64, linux/arm64
        push: true
        load: false
        target: production

  calyptia-rhcc-test-dev-sandbox:
    # Unfortunately no nested virtualisation support in Github actions for Linux
    # The only environment that does support it is MacOS but it is too old to install CRC
    # and CRC uses a guided installer there.
    # Instead we rely on dev sandbox to do the work but this requires a regular renewal and token update.
    # https://developers.redhat.com/developer-sandbox/get-started
    runs-on: ubuntu-latest
    needs: calyptia-rhcc-deploy-staging-images
    env:
      NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
    steps:
      - uses: actions/checkout@v3

      - name: Checkout examples repo to run tests
        uses: actions/checkout@v3
        with:
          repo: https://github.com/calyptia/openshift-fluent-bit-examples.git
          path: openshift-examples

      # Log into the OpenShift cluster using the secrets configured in the repository settings.
      # The GitHub Ubuntu runners have oc pre-installed.
      # If you're not using those runners, be sure to check out https://github.com/redhat-actions/openshift-tools-installer.
      - name: OpenShift login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          # openshift_username:
          # openshift_password:
          insecure_skip_tls_verify: true
          namespace: ${{ env.NAMESPACE }}

      - name: Deploy Helm chart with our image
        run: |
          openshift-examples/grafana-cloud/deploy-helm.sh --atomic --set image.repository="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",image.tag="ubi8"
        env:
          GRAFANA_CLOUD_PROM_USERNAME: ${{ secrets.GRAFANA_CLOUD_PROM_USERNAME }}
          GRAFANA_CLOUD_LOKI_USERNAME: ${{ secrets.GRAFANA_CLOUD_LOKI_USERNAME }}
          GRAFANA_CLOUD_APIKEY: ${{ secrets.GRAFANA_CLOUD_APIKEY }}
          GRAFANA_CLOUD_PROM_URL: prometheus-${{ secrets.GRAFANA_CLOUD_PROM_URL }}.grafana.net
          GRAFANA_CLOUD_LOKI_URL: logs-${{ secrets.GRAFANA_CLOUD_LOKI_URL }}.grafana.net
          IMAGE: ${{ needs.calyptia-rhcc-deploy-staging-images.outputs.image }}
        shell: bash

      - name: Check logs and run for a while
        timeout-minutes: 2
        continue-on-error: true
        run: |
          kubectl logs --namespace $NAMESPACE \
            $(kubectl get pods --namespace $NAMESPACE \
              -l "app.kubernetes.io/name=fluent-bit,app.kubernetes.io/instance=fluent-bit" -o jsonpath="{.items[0].metadata.name}")
          sleep 60
          kubectl logs --namespace fluent-bit-logging \
            $(kubectl get pods --namespace $NAMESPACE \
              -l "app.kubernetes.io/name=fluent-bit,app.kubernetes.io/instance=fluent-bit" -o jsonpath="{.items[0].metadata.name}")

      - name: Error debug
        if: failure()
        run: |
          kubectl get namespace
          kubectl --namespace $NAMESPACE describe all
        shell: bash

      - name: Tear down
        if: always()
        continue-on-error: true
        run: |
          helm delete -n ${{ env.NAMESPACE }} fluent-bit
          oc delete all,secret -n ${{ env.NAMESPACE }}
        shell: bash
