---
name: Deploy RHCC containers to staging

on:
  workflow_dispatch:
  push:

env:
  # Containers
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  calyptia-rhcc-tests:
    name: RHCC - Run Fluent Bit tests
    runs-on: [ ubuntu-latest ]
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build the staging image
      uses: docker/build-push-action@v2
      with:
        file: ./calyptia/ubi8/Dockerfile
        context: ./calyptia/ubi8/
        platforms: linux/amd64
        push: false
        load: false
        build-args: |
          target=test

  calyptia-rhcc-deploy-staging-images:
    name: RHCC - Build multi-arch UBI 8 container images
    runs-on: [ ubuntu-latest ]
    needs: calyptia-rhcc-tests
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata from Github
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          raw,ubi8-${{ inputs.version }}
          raw,ubi8

    - name: Build the staging image
      uses: docker/build-push-action@v2
      with:
        file: ./calyptia/ubi8/Dockerfile
        context: ./calyptia/ubi8/
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64, linux/arm64
        push: true
        load: false
        build-args: |
          target=production
